{"version":3,"sources":["Component/List.js","Component/Dropdown.js","App.js","serviceWorker.js","index.js"],"names":["styles","unorderedli","listStyleType","button","margin","backgroundColor","color","link","List","_this","this","_this$props","props","countries","dispalyCountries","search","privelage","data","Object","toConsumableArray","searchData","toLowerCase","filter","row","flag","includes","isEmpty","react_default","a","createElement","style","onClick","handleAdd","map","country","key","handleSelect","length","fetchMore","Component","box","border","width","input","Dropdown","state","updateSearch","e","setState","target","value","index","console","log","alert","push","handlePrev","axios","get","then","response","_this2","catch","error","slice","_this$state","Fragment","className","type","placeholder","onChange","bind","Component_List","App","Component_Dropdown","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.9619f06f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport isEmpty from 'lodash/isEmpty';\r\n\r\nconst styles = {\r\n    unorderedli: {\r\n        \"listStyleType\": \"none\"\r\n    },\r\n    button: {\r\n        \"margin\": \"10px\",\r\n        \"backgroundColor\": \"#0084a6\",\r\n        \"color\": \"#ffffff\"\r\n    },\r\n    link: {\r\n        \"color\" : \"blue\"\r\n    }\r\n};\r\n\r\nclass List extends Component {\r\n\r\n    render() {\r\n        const { countries, dispalyCountries, search, privelage } = this.props;\r\n        let data = [...dispalyCountries];\r\n        let searchData = search.toLowerCase();\r\n        /*Filtering the country from the list and returning new list of countries */\r\n        if (searchData) {\r\n            data = data.filter((row) => {\r\n                let flag = false;\r\n                if (row.toLowerCase().includes(searchData)) {\r\n                    flag = true;\r\n                }\r\n                return flag;\r\n            });\r\n        };\r\n        return (\r\n            // If the Country is present in list then success block else failed block\r\n            (!isEmpty(data) ?\r\n                (<div>\r\n                    <ul style={styles.unorderedli}>\r\n                        {data.map((country, key) => (\r\n                            <li key={key} onClick={this.props.handleSelect(country)}>{country}</li>\r\n                        ))}\r\n                    </ul>\r\n                    {(countries.length > dispalyCountries.length) ?\r\n                        <span onClick={this.props.fetchMore} style={styles.link}>{countries.length - dispalyCountries.length} more...</span>\r\n                        : null\r\n                    }\r\n                </div>) :\r\n                (<div>\r\n                    <ul style={styles.unorderedli}>\r\n                        <li>\r\n                            {'\"'}{search}{'\" not Found'}\r\n                            {privelage ?\r\n                                <button\r\n                                    style={styles.button}\r\n                                    onClick={this.props.handleAdd}>\r\n                                    Add & Select\r\n                                </button>\r\n                                : null}\r\n                        </li>\r\n                    </ul>\r\n                </div>))\r\n        )\r\n    }\r\n};\r\n\r\nexport default List;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport List from './List';\r\nimport { Button } from '../../node_modules/react-bootstrap';\r\n\r\nconst styles = {\r\n    box: {\r\n        \"border\": \"1px solid #000000\",\r\n        \"width\": \"400px\"\r\n    },\r\n    input: {\r\n        \"listStyleType\": \"none\"\r\n    },\r\n    button: {\r\n        \"margin\": \"10px\",\r\n        \"backgroundColor\": \"#0084a6\",\r\n        \"color\": \"#ffffff\"\r\n    }\r\n};\r\n\r\nclass Dropdown extends Component {\r\n\r\n    state = {\r\n        search: '',\r\n        privelage: true,\r\n        countries: [],\r\n        dispalyCountries: []\r\n    }\r\n\r\n    async componentDidMount() {\r\n        /* Please Install json server with command \"npm i -g json-server\" for Fake API to work*/\r\n        /* Please run \"npm json-server\", confriguartion done in react scripts in package.json*/\r\n        await axios.get(\"http://localhost:4200/countries\")\r\n            .then((response) => {\r\n                this.setState({\r\n                    countries: response\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                this.setState({\r\n                    countries: [\"India\", \"Singapore\", \"Australia\", \"Qatar\", \"Riyadh\", \"Phillipines\", \"Japan\", \"Russia\"]\r\n                })\r\n            })\r\n        this.setState({\r\n            dispalyCountries: this.state.countries.slice(0, 5)\r\n        })\r\n    }\r\n\r\n    updateSearch = (e) => {\r\n        this.setState({ search: e.target.value });\r\n    }\r\n\r\n    fetchMore = () => {\r\n        // Fetching more countries to display\r\n        this.setState({ dispalyCountries: this.state.countries });\r\n    }\r\n\r\n    handleSelect = (country, index) => e => {\r\n        /*For selecting countries in the list and logging it */\r\n        console.log(country);\r\n        alert(country)\r\n    }\r\n\r\n    handleAdd = () => {\r\n        /*For Adding new country, User can add new country if user have privilage */\r\n        this.state.countries.push(this.state.search)\r\n        this.setState({\r\n            search: \"\"\r\n        })\r\n    }\r\n\r\n    handlePrev = () => {\r\n        /*For giving and revoking privilage  to add and select country*/\r\n        this.state.countries.push(this.state.search)\r\n        this.setState({\r\n            privelage: !this.state.privelage\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { countries, dispalyCountries, search, privelage } = this.state;\r\n        return (\r\n            <React.Fragment>\r\n                <div style={styles.box}>\r\n                    {/* Input Field to search */}\r\n                    <div className='SearchInput'>\r\n                        <input type='text'\r\n                            style={styles.input}\r\n                            placeholder=\"Search...\"\r\n                            value={search}\r\n                            onChange={this.updateSearch.bind(this)} />\r\n                    </div>\r\n                    {/* List is the child component to dispaly the list of countries,\r\n                    search is the searched country,\r\n                    dispalyCountries is the list of countries to display */}\r\n                    <List\r\n                        search={search}\r\n                        fetchMore={this.fetchMore}\r\n                        handleAdd={this.handleAdd}\r\n                        handleSelect={this.handleSelect}\r\n                        countries={countries}\r\n                        privelage={privelage}\r\n                        dispalyCountries={dispalyCountries}\r\n                    />\r\n                </div>\r\n                {/* Button for Adding and revoking privelage */}\r\n                <button\r\n                    style={styles.button}\r\n                    onClick={this.handlePrev}>\r\n                    {privelage ? \"Revoke Privelage\" : \"Add Privelage\"}\r\n                </button>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Dropdown;","import React from 'react';\nimport './App.css';\nimport Dropdown from './Component/Dropdown';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dropdown />\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}